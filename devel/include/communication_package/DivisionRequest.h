// Generated by gencpp from file communication_package/DivisionRequest.msg
// DO NOT EDIT!


#ifndef COMMUNICATION_PACKAGE_MESSAGE_DIVISIONREQUEST_H
#define COMMUNICATION_PACKAGE_MESSAGE_DIVISIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace communication_package
{
template <class ContainerAllocator>
struct DivisionRequest_
{
  typedef DivisionRequest_<ContainerAllocator> Type;

  DivisionRequest_()
    : numerator(0.0)
    , denominator(0.0)  {
    }
  DivisionRequest_(const ContainerAllocator& _alloc)
    : numerator(0.0)
    , denominator(0.0)  {
  (void)_alloc;
    }



   typedef double _numerator_type;
  _numerator_type numerator;

   typedef double _denominator_type;
  _denominator_type denominator;





  typedef boost::shared_ptr< ::communication_package::DivisionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::communication_package::DivisionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DivisionRequest_

typedef ::communication_package::DivisionRequest_<std::allocator<void> > DivisionRequest;

typedef boost::shared_ptr< ::communication_package::DivisionRequest > DivisionRequestPtr;
typedef boost::shared_ptr< ::communication_package::DivisionRequest const> DivisionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::communication_package::DivisionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::communication_package::DivisionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::communication_package::DivisionRequest_<ContainerAllocator1> & lhs, const ::communication_package::DivisionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.numerator == rhs.numerator &&
    lhs.denominator == rhs.denominator;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::communication_package::DivisionRequest_<ContainerAllocator1> & lhs, const ::communication_package::DivisionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace communication_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::communication_package::DivisionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::communication_package::DivisionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::communication_package::DivisionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::communication_package::DivisionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::communication_package::DivisionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::communication_package::DivisionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::communication_package::DivisionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "36144fd290b63c004c898a6d5631ab90";
  }

  static const char* value(const ::communication_package::DivisionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x36144fd290b63c00ULL;
  static const uint64_t static_value2 = 0x4c898a6d5631ab90ULL;
};

template<class ContainerAllocator>
struct DataType< ::communication_package::DivisionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "communication_package/DivisionRequest";
  }

  static const char* value(const ::communication_package::DivisionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::communication_package::DivisionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 numerator\n"
"float64 denominator\n"
;
  }

  static const char* value(const ::communication_package::DivisionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::communication_package::DivisionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.numerator);
      stream.next(m.denominator);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DivisionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::communication_package::DivisionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::communication_package::DivisionRequest_<ContainerAllocator>& v)
  {
    s << indent << "numerator: ";
    Printer<double>::stream(s, indent + "  ", v.numerator);
    s << indent << "denominator: ";
    Printer<double>::stream(s, indent + "  ", v.denominator);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMUNICATION_PACKAGE_MESSAGE_DIVISIONREQUEST_H
